version: '3.8'

services:
  nginx:
    build:
      context: .
      dockerfile: Dockerfile_nginx
    ports:
      - "8000:80"
    volumes:
      - ./uploads:/app/uploads
      - ./static:/app/static
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      web:
        condition: service_healthy
    networks:
      - app-network

  web:
    build: .
    expose:
      - "5001"
    environment:
      - FLASK_APP=app.py
      - FLASK_DEBUG=1  # Enable debug mode
      - PYTHONUNBUFFERED=1  # Ensure Python output isn't buffered
    volumes:
      - .:/app
    command: ["flask", "run", "--host=0.0.0.0", "--port=5001", "--reload"]  # Add --reload flag
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s

  celery_worker:
    build: .
    command: celery -A services.celery_worker.celery worker --loglevel=info
    volumes:
      - .:/app
    environment:
      - FLASK_SECRET_KEY=${FLASK_SECRET_KEY}
      - REDIS_HOST=redis
      - SMTP_SERVER=${SMTP_SERVER}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USERNAME=${SMTP_USERNAME}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-network


  db:
    image: mysql:8.0
    environment:
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
    ports:
      - "3308:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    networks:
      - app-network
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes  # Enable AOF persistence
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  adminer:
    image: adminer
    restart: always
    ports:
      - "8080:8080"
    networks:
      - app-network

volumes:
  mysql_data:
  nginx_temp:
  redis_data:    # Add this new volume

networks:
  app-network:
    driver: bridge
